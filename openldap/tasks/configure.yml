---

- name: installing ldap server package
  yum: name={{ item }} state=latest
  with_items:
    - openldap
    - openldap-servers
    - openldap-clients
    - openldap-servers-sql
    - openldap-devel
    - python-ldap

- name: enabling ldap autostart
  service: name=slapd enabled=yes state=started

- name: check if ldap is running
  command: systemctl status slapd
  ignore_errors: yes
  changed_when: false
  register: service_slapd_status

- name: report status of ldap
  fail:
    msg: |
      Service slapd is not running.
      Output of `systemctl status slapd`:
      {{ service_slapd_status.stdout }}
      {{ service_slapd_status.stderr }}
  when: service_slapd_status | failed

- name: generate admin password hash
  shell: slappasswd -h {SSHA} -s {{ rootpw }}
  register: ldapregrootpw

- name: create random temporary directory for ldif file
  command: mktemp -d
  register: slapd_register_tempdir

- name: copy admin_config_pw.ldif
  template: src=admin_config_pw.ldif dest={{ slapd_register_tempdir.stdout }}/admin_config_pw.ldif owner=root group=root mode=0600

- name: admin password
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/admin_config_pw.ldif
  become: true
  ignore_errors: True

- name: copy monitor.ldif
  template: src=monitor.ldif dest={{ slapd_register_tempdir.stdout }}/monitor.ldif owner=root group=root mode=0600

- name: configure monitoring database configuration file
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/monitor.ldif
  become: true
  ignore_errors: True

- name: copy ldap schema
  copy: src={{ item }}.ldif dest={{ path }}/schema owner=root group=root mode=0644
  with_items:
      - sshpubkey
      - sudo
      - ldapns

- name: load some schemas (ignoring duplicate entries error for idempotence)
  shell:  ldapadd -Y EXTERNAL -H ldapi:/// -f {{ path }}/schema/{{ item }}.ldif
  register: ldap_result_code
  failed_when: ldap_result_code.rc not in [0,80]
  changed_when: ldap_result_code.rc not in [0,80]
  with_items:
      - cosine
      - inetorgperson
      - nis
      - sshpubkey
      - sudo
      - ldapns
  become: true
  ignore_errors: True

- name: copy basedomain.ldif
  template: src=basedomain.ldif dest={{ slapd_register_tempdir.stdout }}/basedomain.ldif owner=root group=root mode=0600

- name: load base configuration into ldap
  shell: ldapadd -x -D "cn=ldapadm,{{ suffix }}" -w {{ rootpw }} -f {{ slapd_register_tempdir.stdout }}/basedomain.ldif
  become: true
  ignore_errors: True

- name: create the directory for ldap certificates
  file: path={{ path }}/certs/ state=directory owner=ldap group=ldap

# - name: generate the private key for certificate request
#   shell: openssl genrsa -aes128 -passout pass:password 2048 > {{ path }}/certs/server.key

# - name: strip the passphrase from the key
#   shell: openssl rsa -in {{ path }}/certs/server.key -passin pass:password -out {{ path }}/certs/server.key

# - name: create the new certificate
#   shell: openssl req -utf8 -new -subj '/C={{ country }}/ST={{ state }}/L={{ location }}/O={{ organization }}/CN={{ ansible_hostname }}/' -key {{ path }}/certs/server.key -out {{ path }}/certs/server.csr

# - name: sign the new certificate
#   shell: openssl x509 -in {{ path }}/certs/server.csr -out {{ path }}/certs/server.crt -req -signkey {{ path }}/certs/server.key -days 3650

# - name: copy ca-bundle.crt file
#   command: cp {{ pki }}/ca-bundle.crt {{ path }}/certs/
#   become: true

# - name: SSL Configuration
#   shell: |
#     openssl req -newkey rsa:2048 -nodes -subj "/C={{ country }}/ST={{ state }}/L={{ location }}/O={{ organization }}/CN={{ ansible_hostname }}/" -keyout {{ path }}/certs/server.key -out {{ path }}/certs/server.csr
#     openssl x509 -signkey {{ path }}/certs/server.key -in {{ path }}/certs/server.csr -req -days 3650 -out {{ path }}/certs/server.crt
#     chmod 600 {{ path }}/certs/server.key && chmod 640 {{ path }}/certs/server.crt
#     chown -R ldap:ldap {{ path }}/certs
#   become: true
#   notify:
#     - restart slapd

- name: SSL Configuration
  shell: |
      openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C={{ country }}/ST={{ state }}/L={{ location }}/O={{ organization }}/CN={{ ansible_hostname }}/" -keyout {{ path }}/certs/server.key -out {{ path }}/certs/server.crt
      chmod 600 {{ path }}/certs/server.key && chmod 640 {{ path }}/certs/server.crt && chown -R ldap:ldap {{ path }}/certs
  become: true
  notify:
    - restart slapd

- name: copy addcerts.ldif
  template: src=addcerts.ldif dest={{ slapd_register_tempdir.stdout }}/addcerts.ldif owner=root group=root mode=0600

- name: load certificat configuration into ldap
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/addcerts.ldif
  become: true
  ignore_errors: True

- name: clean temporary directory
  file:
    state: absent
    path: "{{ slapd_register_tempdir.stdout }}"

- name: configure ldap database
  shell: |
    cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
    chown ldap: /var/lib/ldap/*
  become: true
  notify:
    - restart slapd

- name: enable ldaps
  lineinfile:
    dest: /etc/sysconfig/slapd
    regexp: '^SLAPD_URLS=(.*)$'
    line: 'SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"'
    backrefs: yes
  notify:
    - restart slapd

- name: configure ldap logging
  lineinfile:
    path: /etc/rsyslog.conf
    line: 'local4.* /var/log/ldap.log'

- name: restart service rsyslog
  systemd:
    state: restarted
    daemon_reload: yes
    name: rsyslog

- name: run an ldapquery at the end to make sure it responds
  command: ldapsearch -x -H ldap://localhost -b {{ suffix }}
  register: cmd_result

- debug: msg="{{ cmd_result.stdout }}"
