---

- name: Install OpenLDAP packages and necessary packages
  yum: name={{ item }} state=latest
  with_items:
    - openldap
    - openldap-servers
    - openldap-clients
    - openldap-servers-sql
    - openldap-devel
    - python-ldap

- name: Enable ldap autostart
  service: name=slapd enabled=yes state=started

- name: Check if ldap is running
  command: systemctl status slapd
  ignore_errors: yes
  changed_when: false
  register: service_slapd_status

- name: Report status of ldap
  fail:
    msg: |
      Service slapd is not running.
      Output of `systemctl status slapd`:
      {{ service_slapd_status.stdout }}
      {{ service_slapd_status.stderr }}
  when: service_slapd_status | failed

- name: Generate admin password hash
  shell: slappasswd -h {SSHA} -s {{ rootpw }}
  register: ldap_root_pw

- name: Create random temporary directory for ldif file
  command: mktemp -d
  register: slapd_register_tempdir

- name: Copy admin_config_pw.ldif
  template: src=admin_config_pw.ldif dest={{ slapd_register_tempdir.stdout }}/admin_config_pw.ldif owner=root group=root mode=0600

- name: Admin password
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/admin_config_pw.ldif
  ignore_errors: True

- name: Copy monitor.ldif
  template: src=monitor.ldif dest={{ slapd_register_tempdir.stdout }}/monitor.ldif owner=root group=root mode=0600

- name: Modify ldap with monitor.ldif
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/monitor.ldif
  ignore_errors: True

- name: Copy ldap schema
  copy: src={{ item }}.ldif dest={{ path }}/schema owner=root group=root mode=0644
  with_items:
      - sshpubkey
      - sudo
      - ldapns

- name: Load some schemas (ignoring duplicate entries error for idempotence)
  shell:  ldapadd -Y EXTERNAL -H ldapi:/// -f {{ path }}/schema/{{ item }}.ldif
  register: ldap_result_code
  failed_when: ldap_result_code.rc not in [0,80]
  changed_when: ldap_result_code.rc not in [0,80]
  with_items:
      - cosine
      - inetorgperson
      - nis
      - sshpubkey
      - sudo
      - ldapns
  ignore_errors: True

- name: Copy basedomain.ldif
  template: src=basedomain.ldif dest={{ slapd_register_tempdir.stdout }}/basedomain.ldif owner=root group=root mode=0600

- name : Check if basedomain file exist
  stat: path={{ path }}/basedomain_created
  register: basedomain_created_result

- name: Change the base domain for ldap
  shell: ldapadd -x -D "cn=ldapadm,{{ suffix }}" -w {{ rootpw }} -f {{ slapd_register_tempdir.stdout }}/basedomain.ldif && touch {{ path }}/basedomain_created
  when: basedomain_created_result.stat.exists == False
  ignore_errors: True

- name: Apply SSL
  block:
    - name: Create cert to /etc/openldap/certs/
      shell: |
        openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj '/C={{ country }}/ST={{ state }}/L={{ location }}/O={{ organization }}/CN={{ ansible_hostname }}/' -keyout {{ path }}/certs/server.key -out {{ path }}/certs/server.crt
        chmod 600 {{ path }}/certs/server.key && chmod 640 {{ path }}/certs/server.crt && chown -R ldap:ldap {{ path }}/certs

    - name: Copy addcerts.ldif
      template: src=addcerts.ldif dest={{ slapd_register_tempdir.stdout }}/addcerts.ldif owner=root group=root mode=0600

    - name: Load certificate configuration into ldap
      shell: ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ slapd_register_tempdir.stdout }}/addcerts.ldif

    - name: Add ldaps:// into /etc/sysconfig/slapd
      lineinfile:
        dest: /etc/sysconfig/slapd
        regexp: 'ldap:\/\/\/'
        line: 'SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"'
        backrefs: yes
      notify:
        - restart slapd
  when: ssl

- name: Clean temporary directory
  file:
    state: absent
    path: "{{ slapd_register_tempdir.stdout }}"

- name: Configure ldap database
  copy: src=/usr/share/openldap-servers/DB_CONFIG.example dest=/var/lib/ldap/DB_CONFIG remote_src=yes

- name: Change UID/GID of /var/lib/ldap/*
  file:
    path: /var/lib/ldap
    owner: ldap
    group: ldap
    recurse: yes

- name: Configure ldap logging
  lineinfile:
    path: /etc/rsyslog.conf
    line: 'local4.* /var/log/ldap.log'

- name: Restart service rsyslog
  systemd:
    state: restarted
    daemon_reload: yes
    name: rsyslog

- name: Setting up logrotate for ldap log
  copy:
    src: ldap
    dest: /etc/logrotate.d
    mode: 0644

- name: Run an ldapquery at the end to make sure it responds
  command: ldapsearch -x -H ldap://localhost -b {{ suffix }}
  register: cmd_result

- debug: msg="{{ cmd_result.stdout }}"
